<#
.SYNOPSIS
    Uruchamia SecureWindowsToolkit po weryfikacji wymaga≈Ñ bezpiecze≈Ñstwa systemu.

.DESCRIPTION
    Ten skrypt dzia≈Ça jak stra≈ºnik. Zanim uruchomi g≈Ç√≥wny interfejs narzƒôdzia,
    sprawdza, czy system spe≈Çnia kluczowe, nowoczesne standardy bezpiecze≈Ñstwa,
    takie jak TPM, Secure Boot i VBS. Je≈õli weryfikacja siƒô nie powiedzie,
    skrypt wy≈õwietli szczeg√≥≈Çowy raport o brakach i zako≈Ñczy dzia≈Çanie.

.AUTHOR
    Marcel, ElblƒÖg üáµüá±
#>

# --- Blokada przed "kombinowaniem" ---
# Upewniamy siƒô, ≈ºe skrypt jest uruchomiony z pe≈Çnymi uprawnieniami
# i w odpowiednim ≈õrodowisku. Je≈õli nie, ko≈Ñczymy od razu.
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "B≈ÅƒÑD: Ten skrypt musi byƒá uruchomiony jako Administrator!" -ForegroundColor Red
    Write-Host "Kliknij na niego prawym przyciskiem myszy i wybierz 'Uruchom jako administrator'."
    Read-Host "Wci≈õnij Enter, aby zako≈Ñczyƒá."
    exit
}

Clear-Host
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host "  Witaj w SecureWindowsToolkit by Marcel"
Write-Host "  Przeprowadzam audyt bezpiecze≈Ñstwa systemu..."
Write-Host "==================================================" -ForegroundColor Cyan
Start-Sleep -Seconds 2

# --- Faza 1: Weryfikacja Wymaga≈Ñ ---
$wymaganiaSpelnione = $true
$raportBledow = @()

# Sprawdzenie 1: TPM 2.0
Write-Host "üîç Sprawdzam TPM 2.0..." -NoNewline
try {
    $tpm = Get-Tpm
    if ($tpm.TpmPresent -and $tpm.TpmReady) {
        Write-Host " OK" -ForegroundColor Green
    } else {
        $wymaganiaSpelnione = $false
        $raportBledow += "‚ùå TPM: Modu≈Ç TPM nie jest obecny lub nie jest gotowy. Sprawd≈∫ ustawienia w BIOS/UEFI."
        Write-Host " B≈ÅƒÑD" -ForegroundColor Red
    }
} catch {
    $wymaganiaSpelnione = $false
    $raportBledow += "‚ùå TPM: Nie mo≈ºna odczytaƒá statusu TPM. Uruchom skrypt jako Administrator."
    Write-Host " B≈ÅƒÑD" -ForegroundColor Red
}

# Sprawdzenie 2: Secure Boot
Write-Host "üîç Sprawdzam Secure Boot..." -NoNewline
try {
    $secureBootStatus = Confirm-SecureBootUEFI
    if ($secureBootStatus) {
        Write-Host " OK" -ForegroundColor Green
    } else {
        $wymaganiaSpelnione = $false
        $raportBledow += "‚ùå Secure Boot: Bezpieczny Rozruch jest wy≈ÇƒÖczony. Sprawd≈∫ ustawienia w BIOS/UEFI."
        Write-Host " B≈ÅƒÑD" -ForegroundColor Red
    }
} catch {
    $wymaganiaSpelnione = $false
    $raportBledow += "‚ùå Secure Boot: Nie mo≈ºna sprawdziƒá statusu. Upewnij siƒô, ≈ºe system jest w trybie UEFI."
    Write-Host " B≈ÅƒÑD" -ForegroundColor Red
}

# Sprawdzenie 3: Zabezpieczenia oparte na wirtualizacji (VBS)
Write-Host "üîç Sprawdzam Zabezpieczenia oparte na wirtualizacji (VBS)..." -NoNewline
try {
    $vbsInfo = Get-CimInstance -ClassName Win32_DeviceGuard -Namespace "root\Microsoft\Windows\DeviceGuard"
    if ($vbsInfo.VirtualizationBasedSecurityStatus -eq 2) { # Warto≈õƒá 2 oznacza "Running"
        Write-Host " OK" -ForegroundColor Green
    } else {
        $wymaganiaSpelnione = $false
        $raportBledow += "‚ùå VBS: Zabezpieczenia oparte na wirtualizacji sƒÖ wy≈ÇƒÖczone. W≈ÇƒÖcz Intel VT-x w BIOS/UEFI oraz Izolacjƒô Rdzenia w Zabezpieczeniach Windows."
        Write-Host " B≈ÅƒÑD" -ForegroundColor Red
    }
} catch {
    $wymaganiaSpelnione = $false
    $raportBledow += "‚ùå VBS: Nie mo≈ºna sprawdziƒá statusu VBS."
    Write-Host " B≈ÅƒÑD" -ForegroundColor Red
}

Start-Sleep -Seconds 1

# --- Faza 2: Decyzja ---
if ($wymaganiaSpelnione) {
    Write-Host "`n==================================================" -ForegroundColor Green
    Write-Host "  AUDYT ZAKO≈ÉCZONY POMY≈öLNIE!"
    Write-Host "  Tw√≥j system spe≈Çnia wysokie standardy bezpiecze≈Ñstwa."
    Write-Host "  Uruchamiam g≈Ç√≥wny interfejs..."
    Write-Host "==================================================" -ForegroundColor Green
    Start-Sleep -Seconds 3

    # Uruchomienie Twojego g≈Ç√≥wnego interfejsu
    try {
        & "$PSScriptRoot\interfejs.ps1"
    } catch {
        Write-Host "KRYTYCZNY B≈ÅƒÑD: Nie mo≈ºna uruchomiƒá pliku interfejs.ps1!" -ForegroundColor Red
        Write-Host $_.Exception.Message
        Read-Host "Wci≈õnij Enter, aby zako≈Ñczyƒá."
    }

} else {
    Write-Host "`n==================================================" -ForegroundColor Red
    Write-Host "  AUDYT ZAKO≈ÉCZONY NIEPOWODZENIEM!"
    Write-Host "  Tw√≥j system nie spe≈Çnia minimalnych wymaga≈Ñ bezpiecze≈Ñstwa tego narzƒôdzia."
    Write-Host "  Szczeg√≥≈Çy poni≈ºej:"
    Write-Host "--------------------------------------------------" -ForegroundColor Red
    
    foreach ($blad in $raportBledow) {
        Write-Host $blad -ForegroundColor Yellow
    }

    Write-Host "`nProszƒô w≈ÇƒÖczyƒá powy≈ºsze funkcje i spr√≥bowaƒá ponownie." -ForegroundColor Red
    Read-Host "Wci≈õnij Enter, aby zako≈Ñczyƒá."
}
